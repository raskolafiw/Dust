import 'dart:async';
import 'package:build/build.dart';
import 'package:glob/glob.dart';

import 'rules.dart'; // Import the rules and generator

/// A Builder that aggregates all generated .classes files into a final CSS file.
/// Triggered by a specific input file (e.g., lib/atomic_styles.trigger).
class AtomicCssFinalizer implements Builder {
  final String finalCssPath;

  AtomicCssFinalizer(BuilderOptions options)
      : finalCssPath =
            options.config['output'] as String? ?? 'web/atomic_styles.css';

  @override
  Map<String, List<String>> get buildExtensions => {
        // Reads the trigger file, outputs the final CSS
        '.trigger': [finalCssPath],
      };

  @override
  Future<void> build(BuildStep buildStep) async {
    // This builder runs only once, triggered by the .trigger file.
    // It needs to find all .classes files generated in the cache.
    final allFoundClasses = <String>{};
    final classesFiles = buildStep.findAssets(Glob('**/*.classes'));

    await for (final inputId in classesFiles) {
      try {
        if (!await buildStep.canRead(inputId)) continue;
        final content = await buildStep.readAsString(inputId);
        final classesInFile =
            content.split('\n').where((line) => line.trim().isNotEmpty);
        allFoundClasses.addAll(classesInFile);
      } catch (e) {
        log.warning("Error reading intermediate file ${inputId.path}: $e");
      }
    }

    if (allFoundClasses.isEmpty) {
      log.info('AtomicCssFinalizer: No atomic classes found.');
      // Write an empty file
      final outputId = AssetId(buildStep.inputId.package, finalCssPath);
      await buildStep.writeAsString(
          outputId, '/* No atomic styles generated */');
      return;
    }

    // Regenerate CSS based on the unique set of found classes
    final finalCssMap = generateAtomicCss(allFoundClasses);

    // Generate the final CSS output string
    final cssOutputBuffer = StringBuffer();
    cssOutputBuffer.writeln('/* Generated by Dust AtomicCssFinalizer */');
    cssOutputBuffer
        .writeln('/* Found ${allFoundClasses.length} unique atomic classes */');

    final sortedClassNames = finalCssMap.keys.toList()..sort();
    for (final className in sortedClassNames) {
      final escapedClassName = className.replaceAllMapped(
          RegExp(r'[.:/\]'), (match) => '\\${match.group(0)}');
      cssOutputBuffer.writeln('.$escapedClassName {');
      cssOutputBuffer.writeln('  ${finalCssMap[className]}');
      cssOutputBuffer.writeln('}');
    }

    // Define the final output asset ID based on the configuration/default
    final outputId = AssetId(buildStep.inputId.package, finalCssPath);

    // Write the final aggregated CSS file
    await buildStep.writeAsString(outputId, cssOutputBuffer.toString());
    log.info(
        'AtomicCssFinalizer: Wrote final aggregated CSS to ${outputId.path}');
  }
}
