import 'dart:async';
import 'package:build/build.dart';
import 'package:glob/glob.dart';

import 'rules.dart'; // Import the rules and generator
// No longer need to import builder.dart

/// A Builder that reads the collected atomic classes (from a shared state or intermediate asset)
/// and writes the final CSS file. Triggered by a specific input.
class CssWriterBuilder implements Builder {
  final String finalCssPath;

  CssWriterBuilder(BuilderOptions options)
      : finalCssPath =
            options.config['output'] as String? ?? 'web/atomic_styles.css';

  @override
  Map<String, List<String>> get buildExtensions => {
        // Reads the trigger file, outputs the final CSS
        // Using the same trigger mechanism for now.
        '^web/atomic_styles.trigger': [finalCssPath],
      };

  @override
  Future<void> build(BuildStep buildStep) async {
    // This builder runs only once, triggered by the .trigger file.
    final allFoundClasses = <String>{};

    // Find and read all .classes files generated by AtomicStyleBuilder.
    // These files are expected to be in the build cache.
    final classesFiles = buildStep.findAssets(Glob('**/*.classes'));

    await for (final inputId in classesFiles) {
      try {
        if (!await buildStep.canRead(inputId)) continue;
        final content = await buildStep.readAsString(inputId);
        final classesInFile =
            content.split('\n').where((line) => line.trim().isNotEmpty);
        allFoundClasses.addAll(classesInFile);
      } catch (e) {
        // Log errors reading intermediate files but continue aggregation
        log.warning("Error reading intermediate file ${inputId.path}: $e");
      }
    }

    // Removed static access logic. allFoundClasses is already populated from .classes files.

    if (allFoundClasses.isEmpty) {
      log.info('CssWriterBuilder: No atomic classes collected in this run.');
      final outputId = AssetId(buildStep.inputId.package, finalCssPath);
      await buildStep.writeAsString(
          outputId, '/* No atomic styles generated */');
      return;
    }

    // Generate CSS based on the unique set of found classes
    final finalCssMap = generateAtomicCss(allFoundClasses);

    // Generate the final CSS output string
    final cssOutputBuffer = StringBuffer();
    cssOutputBuffer.writeln('/* Generated by Dust CssWriterBuilder */');
    cssOutputBuffer
        .writeln('/* Found ${allFoundClasses.length} unique atomic classes */');

    final sortedClassNames = finalCssMap.keys.toList()..sort();
    for (final className in sortedClassNames) {
      // Escape characters that have special meaning in CSS selectors
      final escapedClassName = className.replaceAllMapped(
          RegExp(r'([.:/\\\[\]])'), (match) => '\\${match.group(1)}');
      cssOutputBuffer.writeln('.$escapedClassName {');
      cssOutputBuffer.writeln('  ${finalCssMap[className]}');
      cssOutputBuffer.writeln('}');
    }

    // Define the final output asset ID
    final outputId = AssetId(buildStep.inputId.package, finalCssPath);

    // Write the final aggregated CSS file
    await buildStep.writeAsString(outputId, cssOutputBuffer.toString());
    log.info(
        'CssWriterBuilder: Wrote final aggregated CSS to ${outputId.path}');

    // No static set to clear
  }
}
